<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>moxiaomomo Blog</title>
        <description>moxiaomomo Blog - mo_guang</description>
        <link>http://moxiaomomo.github.com/blue_sky</link>
        <link>http://moxiaomomo.github.com/blue_sky</link>
        <lastBuildDate>2013-10-20T17:19:22+08:00</lastBuildDate>
        <pubDate>2013-10-20T17:19:22+08:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>【python】pygame实现简单的俄罗斯方块</title>
                <description>&lt;p&gt;shapes.py定义了方块类型, common.py定义了一些常量，及地图相关数组等&lt;/p&gt;
&lt;p&gt;common.py&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
#!/usr/bin/env python2.7
#-*- encoding:utf-8 -*-

# 初始化地图，并为活动空间外墙壁赋值
def init_map(max_x, max_y, wall_widith, wall_height):  
    maps = [[0 for col in range(max_x)]for cell in range(max_y)]  
    for y in range(max_y):  
        for x in range(max_x):  
            if x &lt; wall_widith or x &gt; max_x - wall_widith - 1 or y &gt; max_y - wall_height-1 or y &lt; WALL_HEIGHT:  
                    maps[y][x] = 2 
    return maps

# 获取新方块的起始位置  
def get_start_point(shape):
    h = len(shape)
    return [CENTER_X, WALL_HEIGHT-h]

SCREEN_SIZE = WIDTH, HEIGHT = [760, 560]
BACKGROUND_COLOR = (33, 124, 33)  
BLOCK_COLOR = (123, 22, 33)  
BLOCK_EDGE_COLOR = (200, 233, 200)
OUTER_WALL_COLOR = (51, 51, 51) 
 
WALL_WIDTH = 11 
WALL_HEIGHT = 3  
#地图从(0,0)坐标开始画  
MAP_BEGIN_POINT = [0, 0]  
#地图的最大行数和列数  
MAX_X, MAX_Y = 38, 28 
#方块的边长  
RECT_SIZE = [WIDTH/MAX_X, HEIGHT/MAX_Y]  
#屏幕中央的x坐标  
CENTER_X = int(MAX_X / 2) - 3
#地图的数据  
MAP_DATA = init_map(MAX_X, MAX_Y, WALL_WIDTH, WALL_HEIGHT)  
# 展示下一方块的区域起始位置
NEXT_BLOCK_START_POINT = [WALL_HEIGHT, WALL_HEIGHT]
# 展示分数的区域起始位置
SCORE_START_POINT = [MAX_X - WALL_WIDTH + 1, WALL_HEIGHT]
#每秒的帧数  
FPS = 40  
#方块的下落速度  
SPEED = 1  
#方块自由体积下落的时间间隔  
FALL_PER_SECONDS = 1  

&lt;/code&gt;&lt;/pre&gt;
&lt;!-- more --&gt;

&lt;p&gt;shapes.py&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
#!/usr/bin/env python2.7
#-* coding:UTF-8 -*
import random

NT_SHAPES = [
    [
        [1,1,0],
        [0,1,0],
        [0,1,0]
    ],
    [
        [1,1,0],
        [0,1,1],
        [0,0,0]
    ],
    [
        [0,1,1],
        [1,1,0],
        [0,0,0]
    ],
    [
        [1,1,1],
        [0,1,0],
        [0,0,0]
    ],
    [
        [0,0,0,0],
        [1,1,1,1],
        [0,0,0,0],
        [0,0,0,0]
    ],
    [
        [0,1,1],
        [0,1,0],
        [0,1,0]
    ],
    [
        [1,1],
        [1,1]
    ]
]

# 随机生成方块
def get_shape():
    shape = random.choice(NT_SHAPES)
    rotate_cnt = random.randint(0,3)
    for i in range(0,rotate_cnt):
    	shape = rotate_shape(shape)
    return shape

# 90°旋转方块
def rotate_shape(shape):
    h = len(shape)
    w = len(shape[0])

    new_shape = [[0 for col in range(w)] for row in range(h)]
    for x in range(w):
        for y in range(h-1, -1, -1):
            new_shape[x][y] = shape[y][h-1-x]

    return new_shape



&lt;/code&gt;&lt;/pre&gt;

&lt;h&gt;tetries_game.py&lt;/h&gt;
&lt;pre&gt;&lt;code&gt;
#!/usr/bin/env python2.7
#-* coding:UTF-8 -*

import pygame
from sys import exit
from pygame.locals import *
import copy

from shapes import *
from common import *

SCREEN = None
SCORE = 0

def init_game():
    global SCREEN
    pygame.init()  
    SCREEN = pygame.display.set_mode(SCREEN_SIZE)  
    SCREEN.fill(BACKGROUND_COLOR)  
    pygame.key.set_repeat(200, 2)
    pygame.display.set_caption(&quot;Cool Tetris&quot;)
 
def draw(block_data, start_point, map_data, SCREEN, next_block_data=None, game_over=False):  
    _map_data = copy.deepcopy(map_data)  
    _map_start_point = MAP_BEGIN_POINT[:]  
    #更新地图对应的数组数据  
    update_map_data(block_data, start_point, _map_data, next_block_data)
    begin_x = _map_start_point[0]   
    for line in _map_data:  
        for block in line:  
            rect = pygame.Rect(_map_start_point, RECT_SIZE)  
            if block == 1:
                pygame.draw.rect(SCREEN, BLOCK_COLOR, rect) 
                pygame.draw.rect(SCREEN, BLOCK_EDGE_COLOR, rect, 1)
            if block == 2:
                pygame.draw.rect(SCREEN, OUTER_WALL_COLOR, rect)
            _map_start_point[0] += RECT_SIZE[0]  
        _map_start_point[1] += RECT_SIZE[1]  
        _map_start_point[0] = begin_x

    _start_point = SCORE_START_POINT[:]
    _rect_size = RECT_SIZE[:]
    font = pygame.font.Font(None, 32)
    text = font.render(&quot;Score: &quot;+str(SCORE), True, [0,0,0])
    SCREEN.blit(text, [_start_point[0]*_rect_size[0], _start_point[1]*_rect_size[1]])

    if game_over:
        text = font.render(&quot;Game Over&quot;, True, [0,0,0])
        SCREEN.blit(text, [_start_point[0]*_rect_size[0], (_start_point[1]+3)*_rect_size[1]]) 

&#39;&#39;&#39;
    更新地图数据(各个方块的值)
&#39;&#39;&#39;		
def update_map_data(block_data, start_point, map_data, next_block_data):    
    _start_x, _start_y = start_point[0], start_point[1]   
    for y in range(len(block_data)):  
        for x in range(len(block_data[0])):   
            if _start_x + x &lt;= WALL_WIDTH - 1 or _start_x + x &gt;= MAX_X - WALL_WIDTH:  
                continue  
            if map_data[_start_y + y][_start_x + x] == 0:  
                map_data[_start_y + y][_start_x + x] = block_data[y][x]

    # 更新下一个方块对应的地图数组值
    if next_block_data:
        _lt_point = NEXT_BLOCK_START_POINT[:]
        _start_x, _start_y = _lt_point[0], _lt_point[1]
        for y in range(4):  
            for x in range(4):
                map_data[_start_y + y][_start_x + x] = 2
        for y in range(len(next_block_data)):  
            for x in range(len(next_block_data[0])):
                if next_block_data[y][x] == 1:
                    map_data[_start_y + y][_start_x + x] = 1

&#39;&#39;&#39;
    判断方块在地图里面是否发生相撞
&#39;&#39;&#39;   
def can_move(block_data, start_point, map_data):  
   _start_x, _start_y = start_point[0], start_point[1]  
   for y in range(len(block_data)):  
       for x in range(len(block_data[0])):  
           if _start_y&gt;=WALL_HEIGHT and block_data[y][x] and map_data[_start_y + y][_start_x + x]:  
                return False  
   return True

def is_game_over(block_data, start_point, map_data, can_move):
    _start_x, _start_y = start_point[0], start_point[1]
    if not can_move and _start_y &lt; WALL_HEIGHT:
        for x in block_data[0]:
           if x==1:
               return True
    return False
 
&#39;&#39;&#39;
    判断哪些行可以进行消除，返回可以消除的最底行的y坐标
&#39;&#39;&#39; 
def get_max_full_line(map_data):    
    full_line_y = -1  
    #从最底部开始向上扫描，如果发现整行都为1, 则可以消除该行  
    for y in range(MAX_Y-WALL_HEIGHT-1, WALL_HEIGHT, -1):
        if len([x for x in map_data[y] if x == 1 ]) == (MAX_X - WALL_WIDTH*2):  
            full_line_y = y
            break
        elif y == 1:
            break    
    return full_line_y  
 
&#39;&#39;&#39;
   循环遍历满格行，数组值依次下移
&#39;&#39;&#39; 
def delete_full_lines(map_data):
    global SCORE
    full_line_y = get_max_full_line(map_data)
    while full_line_y &gt;= 0:
        SCORE += 100
        for y in range(full_line_y, WALL_HEIGHT, -1):  
            for x in range(WALL_WIDTH, MAX_X - WALL_WIDTH):
                if y &gt;= 1:
                    map_data[y][x] = map_data[y - 1][x]
                else:
                    for x in range(WALL_WIDTH, MAX_X - WALL_WIDTH):
                        map_data[0][x] = 0
    
        full_line_y = get_max_full_line(map_data)
 
def start_game():  
    init_game()

    _running = True
    _pause = False
    _game_over = False
    _score = 0
    _clock = pygame.time.Clock()  
    _time_passed = 0  
    _map_data = copy.deepcopy(MAP_DATA)  
    _block_data = get_shape()
    _next_block_data = get_shape()
    _block_lt = get_start_point(_block_data) 
	
    draw(_block_data, _block_lt, _map_data, SCREEN, _next_block_data, False)  
    pygame.display.flip()  

    try:  
        while _running:
            if not _pause:
                _time_passed += (_clock.tick(FPS) / 1000.0)
                
                if not _game_over and int(round(_time_passed))/FALL_PER_SECONDS &gt;= 1:  
                    #向下移动一个距离，如不能移动则生成新方块，更新地图
                    _block_lt_x = _block_lt[0]  
                    _block_lt_y = _block_lt[1]  
                    _block_lt_y += SPEED
                    print _block_lt_y
                    if can_move(_block_data,[_block_lt_x,_block_lt_y],_map_data):  
                        _block_lt[1] = _block_lt_y  
                    else:
                        if is_game_over(_block_data, _block_lt, _map_data, False):
                            _game_over = True
                            draw(_block_data, _block_lt, _map_data, SCREEN, next_block_data=None, game_over=True)
                            pygame.display.update()
                        else:
                            update_map_data(_block_data, _block_lt, _map_data, _next_block_data)  
                            delete_full_lines(_map_data)  
                            _block_data = _next_block_data  
                            _next_block_data = get_shape()
                            _block_lt = get_start_point(_block_data)
                            
                    _time_passed = 0
 
            for event in pygame.event.get():
                if event.type == pygame.QUIT:  
                    _running = False  
                if event.type == pygame.KEYDOWN and not _game_over:
                    if event.key == pygame.K_SPACE:
                        _pause = not _pause
                    if _pause: continue
                    _block_lt_x = _block_lt[0]  
                    _block_lt_y = _block_lt[1]  
                    if event.key == pygame.K_DOWN:
                        if can_move(_block_data, [_block_lt_x, _block_lt_y + 1], _map_data):
                            _block_lt[1] += 1
                    elif event.key == pygame.K_LEFT:  
                        if can_move(_block_data, [_block_lt_x - 1, _block_lt_y], _map_data):  
                            _block_lt[0] -= 1  
                    elif event.key == pygame.K_RIGHT:  
                        if can_move(_block_data, [_block_lt_x + 1, _block_lt_y], _map_data):  
                            _block_lt[0] += 1  
                    elif event.key == pygame.K_UP:  
                        test_rorate = rotate_shape(_block_data)  
                        if can_move(test_rorate, _block_lt, _map_data):  
                            _block_data = test_rorate                    
 
            SCREEN.fill(BACKGROUND_COLOR)  
            draw(_block_data, _block_lt, _map_data, SCREEN, _next_block_data)
            pygame.display.update()  
    finally:
        pygame.quit()
            
 
if __name__ == &#39;__main__&#39;:  
    start_game()

&lt;/code&gt;&lt;/pre&gt;

&lt;h&gt;运行效果如下:&lt;/h&gt;
&lt;img src=&quot;/blue_sky/assets/img/20130926083806.png&quot; alt=&quot;俄罗斯方块&quot;&gt;&lt;/img&gt;

&lt;p&gt;未完待续&lt;/p&gt;
</description>
                <link>http://moxiaomomo.github.com/blue_sky/2013/09/24/terris</link>
                <guid>http://moxiaomomo.github.com/blue_sky/2013/09/24/terris</guid>
                <pubDate>2013-09-24T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>【python】按行切分文件</title>
                <description>&lt;p&gt;python脚本利用shell命令来实现文本的操作， 这些命令大大减少了我们的代码量。
比如按行切分文件并返回切分后得到的文件列表，可以利用内建的split命令进行切分。为了返回得到的文件列表名，可以先将文件切分到自建的子目录中，然后通过
os.listdir获取所有文件，再将这些文件移到上一级目录(即函数参数指定的新目录)，删除自建子目录，最后返回该文件名列表。
代码如下，如发现问题欢迎指正:&lt;/p&gt;
&lt;!-- more --&gt;
&lt;pre&gt;&lt;code&gt;
# 创建新路径
def make_dirs(path):
    if not os.path.isdir(path):
        os.makedirs(path)   

# 获取文件的行数
def get_total_lines(file_path):
    if not os.path.exists(file_path):
        return 0
    cmd = &#39;wc -l %s&#39; % file_path
    return int(os.popen(cmd).read().split()[0])

# 函数split_file_by_row: 按行切分文件
# filepath: 切分的目标文件
# new_filepath: 生成新文件的路径
# row_cnt: 每个文件最多包含几行
# suffix_type: 新文件后缀类型，如两位字母或数字
# return: 切分后的文件列表
def split_file_by_row(filepath, new_filepath, row_cnt, suffix_type=&#39;-d&#39;):
    tmp_dir = &quot;/split_file_by_row/&quot;
    make_dirs(new_filepath)
    make_dirs(new_filepath+tmp_dir)

    total_rows = get_total_lines(filepath)
    file_cnt = int(math.ceil(total_rows*1.0/row_cnt))
        command = &quot;split -l%d -a2 %s %s %s&quot; % (row_cnt, suffix_type, filepath, new_filepath+tmp_dir) 
        os.system(command)

        filelist = os.listdir(new_filepath+tmp_dir)
    command = &quot;mv %s/* %s&quot;%(new_filepath+tmp_dir, new_filepath)
    os.system(command)

    command = &quot;rm -r %s&quot;%(new_filepath+tmp_dir)
    os.system(command)

    return [new_filepath+fn for fn in filelist]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/P&gt;
&lt;p&gt;17 Sep 2013&lt;/p&gt;


</description>
                <link>http://moxiaomomo.github.com/blue_sky/2013/09/17/%5Bpython%5Dsplit-file-by-row</link>
                <guid>http://moxiaomomo.github.com/blue_sky/2013/09/17/[python]split-file-by-row</guid>
                <pubDate>2013-09-17T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>【C++】快速排序的一种实现</title>
                <description>&lt;p&gt;废话不多说，直接上代码。
 
源码一：&lt;/p&gt;
&lt;pre class=&quot;c++&quot;&gt;&lt;code&gt;
int partition(int A[],int left,int right)   //其中的一趟排序
{
	int p=(left+right)/2;
	int temp=A[right];          //将选中的标准值放到数组末尾
	A[right]=A[p];
	A[p]=temp;

	int a1=left,a2=right-1;
	while(a1&lt;a2)
	{
		while(A[a1]&lt;A[right]){a1++;}   //左子数组寻找比标准值大的索引值
		while(A[a2]&gt;=A[right]&amp;&amp;a1&lt;a2)a2--;  //右子数组寻找比标准值小的索引值
		if(a1&gt;=a2)break;
		int temp1=A[a1];      //交换值
		A[a1]=A[a2];
		A[a2]=temp1;		
	}

	if(A[a1]&gt;=A[right])  //将标准值重新交换回到合适位置
	{
	    temp=A[a1];
	    A[a1]=A[right];
	    A[right]=temp;
	}

	return a2;
}

void QuickSort(int A[],int left,int right)
{
	if(left&lt;right)
	{
		int pi=partition(A,left,right);
		if(left&lt;pi)QuickSort(A,left,pi);  //左递归排序
		if(pi+1&lt;right)QuickSort(A,pi+1,right);//有递归排序
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- more --&gt;
&lt;p&gt;优化之源码二&lt;/P&gt;
&lt;pre class=&quot;c++&quot; name=&quot;colorcode&quot;&gt;&lt;code&gt;
void qs(int a[],int s,int e) 
{
	int x=a[s],l=s,r=e;
	//以第一个数为参照做比较
	if(l&gt;=r)return;
	while(l&lt;r)
	{
		while(l&lt;r&amp;&amp;a[r]&gt;=x)
			r--; //不小于分界值的留在右边，遇到小于的停止
		a[l]=a[r];
		while(l&lt;r&amp;&amp;a[l]&lt;x)l++;
		//小于分界值的留在左边，遇到不小于的停止
		a[r]=a[l];
	}
	a[r]=x;
	qs(a,s,r-1);
	qs(a,r+1,e);//递归 　
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;17 Apr 2011&lt;/p&gt;


</description>
                <link>http://moxiaomomo.github.com/blue_sky/algorithm/2011/04/17/%5BC%2B%2B%5Dpku_quicksort</link>
                <guid>http://moxiaomomo.github.com/blue_sky/algorithm/2011/04/17/[C++]pku_quicksort</guid>
                <pubDate>2011-04-17T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>【C++】pku 1579_简单动态规划</title>
                <description>&lt;p&gt;原题：
Description&lt;br&gt;
&lt;br&gt;
We all love recursion! Don&#39;t we? &lt;br&gt;
&lt;br&gt;
Consider a three-parameter recursive function w(a, b, c): &lt;br&gt;
&lt;br&gt;
if a &lt;= 0 or b &lt;= 0 or c &lt;= 0, then w(a, b, c) returns: &lt;br&gt;
1 &lt;br&gt;
&lt;br&gt;
if a &gt; 20 or b &gt; 20 or c &gt; 20, then w(a, b, c) returns: &lt;br&gt;
w(20, 20, 20) &lt;br&gt;
&lt;!-- more --&gt;
&lt;br&gt;
if a &lt; b and b &lt; c, then w(a, b, c) returns: &lt;br&gt;
w(a, b, c-1) + w(a, b-1, c-1) - w(a, b-1, c) &lt;br&gt;
&lt;br&gt;
otherwise it returns: &lt;br&gt;
w(a-1, b, c) + w(a-1, b-1, c) + w(a-1, b, c-1) - w(a-1, b-1, c-1)&lt;br&gt; 
&lt;br&gt;
This is an easy function to implement. The problem is, if implemented directly, for moderate values of a, b and c (for example, a = 15, b = 15, c = 15), the program takes hours to run because of the massive recursion. &lt;br&gt;
Input&lt;br&gt;
&lt;br&gt;
The input for your program will be a series of integer triples, one per line, until the end-of-file flag of -1 -1 -1. Using the above technique, you are to calculate w(a, b, c) efficiently and print the result.&lt;br&gt;
Output&lt;br&gt;
&lt;br&gt;
Print the value for w(a,b,c) for each triple.&lt;br&gt;

思路：题目所给的函数就是递归函数，要是按照函数本身写递归式，由于子问题的扩展速度太快扩展范围太大，结果肯定是TLE。&lt;br&gt;
因此，为了减少重复计算，引入一个三维数组。每次从w(a,b,c)开始递推时，在子问题中只要s[x][y][z]有返回值就记录一次；如果在递归过程中，遇到s[x][y][z]已被赋值，则在此子问题中不再进行递归，直接返回值s[x][y][z].&lt;br&gt;
小结：这道题是很地道的DP，由于子问题过多，可以将问题的结果保存起来，避免重复递归。问题虽然简单，但包含很经典的dp思想。&lt;br&gt;
 
源码：&lt;/p&gt;
&lt;pre class=&quot;C++&quot;&gt;&lt;code&gt;
Source Code

Problem: 1579  User: moxiaomomo 
Memory: 200K  Time: 0MS 
Language: C++  Result: Accepted 

Source Code 
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;
int powers[21]={1,2,4,8,16,32,64,128,256,512,1024,
                2048,4096,8192,16384,32768,65536,131072,
				262144,524288,1048576};

int s[21][21][21];

int w(int a1,int b1,int c1)
{
	if(a1&lt;=0||b1&lt;=0||c1&lt;=0)
		return 1;
	if(a1&gt;20||b1&gt;20||c1&gt;20)
		return 1048576;
	if(a1&lt;=b1||a1&lt;=c1)
		return powers[a1];
    if(s[a1-1][b1][c1]==0)s[a1-1][b1][c1]=w(a1-1,b1,c1);
	if(s[a1-1][b1-1][c1]==0)s[a1-1][b1-1][c1]=w(a1-1,b1-1,c1);
	if(s[a1-1][b1][c1-1]==0)s[a1-1][b1][c1-1]=w(a1-1,b1,c1-1);
	if(s[a1-1][b1-1][c1-1]==0)s[a1-1][b1-1][c1-1]=w(a1-1,b1-1,c1-1);
	return s[a1-1][b1][c1]+s[a1-1][b1-1][c1]+
		   s[a1-1][b1][c1-1]-s[a1-1][b1-1][c1-1];
}

int main()
{  
	int a,b,c,sum=1;
	memset(s,0,sizeof(s));
	s[20][20][20]=1048576;
	while(scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c)&amp;&amp;(a!=-1||b!=-1||c!=-1))
	{
		if(a&lt;0||b&lt;0||c&lt;0)sum=1;
		else if(a&gt;20||b&gt;20||c&gt;20)sum=1048576;
		else if(s[a][b][c]==0)sum=s[a][b][c]=w(a,b,c);
		else sum=s[a][b][c];
		printf(&quot;w(%d, %d, %d) = %d/n&quot;,a,b,c,sum);
	}
	return 0;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/P&gt;
&lt;p&gt;10 Nov 2010&lt;/p&gt;


</description>
                <link>http://moxiaomomo.github.com/blue_sky/algorithm/2010/11/10/%5BC%2B%2B%5Dpku_1579</link>
                <guid>http://moxiaomomo.github.com/blue_sky/algorithm/2010/11/10/[C++]pku_1579</guid>
                <pubDate>2010-11-10T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>【C++】pku 3750_STL容器的简单应用</title>
                <description>&lt;p&gt;原题：
Description
有N个小孩围成一圈，给他们从1开始依次编号，现指定从第W个开始报数，报到第S个时，该小孩出列，然后从下一个小孩开始报数，仍是报到S个出列，如此重复下去，直到所有的小孩都出列（总人数不足S个时将循环报数），求小孩出列的顺序。
Input
第一行输入小孩的人数N（N&lt;=64） 
接下来每行输入一个小孩的名字(人名不超过15个字符) 
最后一行输入W,S (W &lt; N)，用逗号&quot;,&quot;间隔
Output
按人名输出小孩按顺序出列的顺序，每行输出一个人名

思路：简单的容器vector+循环
 
源码：&lt;/p&gt;
&lt;!-- more --&gt;
&lt;pre&gt;&lt;code&gt;
            Source Code

Problem: 3750  User: moxiaomomo 
Memory: 240K  Time: 16MS 
Language: C++  Result: Accepted 


#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;

vector&lt;string&gt; v;
string child_name[65];
char sn[8];

int main()
{  
	int n,w,s;
	char c;
	v.push_back(&quot;0&quot;);
	cin&gt;&gt;n;
	for(int i=1;i&lt;=n;++i)
	{
		cin&gt;&gt;child_name[i];
		v.push_back(child_name[i]);
	}
	cin.ignore();
	cin.getline(sn,7);
	w=sn[0]-&#39;0&#39;;
	s=sn[2]-&#39;0&#39;;

	for(int i=1;i&lt;=n;++i)
	{
		int j,cn;
		for(j=w-1,cn=1;cn&lt;=s;++cn)
		{ //循环计数
			if(j==v.size()-1)j=0;
			++j;
		}
		cout&lt;&lt;v[j]&lt;&lt;endl;
		v.erase(v.begin()+j);
		if(j&gt;=v.size())w=1;
		else w=j;
	}
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/P&gt;
&lt;p&gt;06 Nov 2010&lt;/p&gt;


</description>
                <link>http://moxiaomomo.github.com/blue_sky/algorithm/2010/11/06/%5BC%2B%2B%5Dpku_3750</link>
                <guid>http://moxiaomomo.github.com/blue_sky/algorithm/2010/11/06/[C++]pku_3750</guid>
                <pubDate>2010-11-06T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>【C++】pku 2362_Square 深搜+回溯</title>
                <description>&lt;p&gt;搜索经典题，与pku acm_1011题类似。
写得有点拗手，一开始都不知道跳到哪里去了，还得参考了很久以前做的1011题的源码，还得多多练习啊~
 
源码：&lt;/p&gt;
&lt;!-- more --&gt;
&lt;pre&gt;&lt;code&gt;
Problem: 2362		User: moxiaomomo
Memory: 240K		Time: 110MS
Language: C++		Result: Accepted

#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;
int n,m, s[25],sum;
bool mark[25];
bool cmp(int a, int b){
    return a &gt; b;
}
bool DFS(int cur_len, int k, int cur_num){
	if (cur_num == 4) return true;    //4条边全部还原成功，返回true
	else if (cur_len == sum) return DFS(0, 0, cur_num + 1);      //已完成当前一条边，还原下一条边
	else{
		int  i;//pre,pre = 0, 
		for (i = k; i &lt; m; i++)
		{
			if (mark[i] &amp;&amp; s[i] + cur_len &lt;= sum){//当前木棍可用 //&amp;&amp; s[i] != pre
				       //pre = s[i];
				mark[i] = false;     //改变使用状态
				if (DFS(cur_len + s[i], i + 1, cur_num)) break;   //递归检测下一条木棍
				mark[i] = true;       //如果使用当前的木棍并不能成功还原的话，还原此木棍状态
				if (k == 0) return false; //回溯到第一根木棍仍然不能成功还原时，返回false
			}
		}
		if (i == m) return false; //一直到无法还原边，循环结束, 则return false
		else return true;
	}
}
int main(){
	cin&gt;&gt;n;
	
	while(--n&gt;=0)
	{
		cin&gt;&gt;m;
		for (int i = sum = 0; i &lt; m; i++)
		{
			cin&gt;&gt;s[i];
			sum += s[i];
		}
		if(sum%4!=0)
		{printf(&quot;no/n&quot;);continue;}
		sort(s, s + m, cmp);
		sum /= 4;            
		memset(mark, true, sizeof(mark));
        if(DFS(0, 0, 0))printf(&quot;yes/n&quot;);
		else printf(&quot;no/n&quot;);
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/P&gt;
&lt;p&gt;01 Nov 2010&lt;/p&gt;


</description>
                <link>http://moxiaomomo.github.com/blue_sky/algorithm/2010/11/01/%5BC%2B%2B%5Dpku_2362</link>
                <guid>http://moxiaomomo.github.com/blue_sky/algorithm/2010/11/01/[C++]pku_2362</guid>
                <pubDate>2010-11-01T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>【C++】pku 2182_线段树简单应用</title>
                <description>&lt;p&gt;题解：题目大意是说农场里有很多奶牛，每一头奶牛有唯一的标记号。在事先并不知道所有奶牛情况下，记录员从第一头牛开始记录数据。从第二头牛开始，每次都要计算有几头牛的标记号比当前这头牛的标记号要小，即有几头牛排在这头牛的前面。

线段树的经典应用，当然不是唯一方法。举个例子说明一下题意~

比如：n = 3
序列1 2 3中每个元素前面大于它的元素个数分别为0 1 2
输入为：0 1 1
则从最后一个1开始向前看，1 2 3 中前面大于该元素的元素个数为1的为数字1，因此选择数字1，然后将1从序列中删除（1 2 3-&gt;2 3，0 1 2-&gt;0 1）。然后看倒数第二个1。依此类推。
 
源码：&lt;/p&gt;
&lt;!-- more --&gt;
&lt;pre&gt;&lt;code&gt;
Problem: 2182		User: moxiaomomo
Memory: 420K		Time: 16MS
Language: C++		Result: Accepted

#include&lt;iostream&gt;
using namespace std;
struct Node
{
    int l;
    int r;
    int cnt;//在[l,r]区间中的个数
};
Node T[16*1024];
int a[8005];
int ans[8005];
int n;
//建立线段树
void build(int l,int r,int u)
{
    T[u].l=l;
    T[u].r=r;
    T[u].cnt=r-l+1;
    if(l&lt;r)
    {
        build(l,(l+r)/2,2*u);
        build((l+r)/2+1,r,2*u+1);
    }
}
//每次找到一个点后，删除该点，并修改路径值
void del(int c,int root) 
{
    if(T[root].l == T[root].r)
    {
        ans[n]=T[root].l;   //找到所求的点
        T[root].cnt=0;  
        return ;
    }
    if(c&lt;=T[2*root].cnt)
        del(c,2*root);
    else
        del(c-T[2*root].cnt,2*root+1);
    T[root].cnt--;       //删除一个点后，父节点中的数值和减1
}
int main()
{
    int N;
    scanf(&quot;%d&quot;,&amp;N);
    int i;
    a[1]=0;
    for(i=2;i&lt;=N;++i)
        scanf(&quot;%d&quot;,&amp;a[i]);
    build(1,N,1);
    for(n=N;n&gt;0;--n)
    {
        del(a[n]+1,1);
    }
    for(i=1;i&lt;=N;++i)
        printf(&quot;%d/n&quot;,ans[i]);
    return 0;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/P&gt;
&lt;p&gt;31 Oct 2010&lt;/p&gt;


</description>
                <link>http://moxiaomomo.github.com/blue_sky/algorithm/2010/10/31/%5BC%2B%2B%5Dpku_2182</link>
                <guid>http://moxiaomomo.github.com/blue_sky/algorithm/2010/10/31/[C++]pku_2182</guid>
                <pubDate>2010-10-31T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>【C++】pku 1273_Drainage Ditches 最大流问题</title>
                <description>&lt;p&gt;经典网络流问题，使用Ford Fulkson算法。

思路大概是：求排水沟网络中的最大排水量。
                  从源点开始，每次寻找一条增广路径，更新一次，再重新找增广路径……直到没有为止。即每次寻找一条由源点到汇点的路径；
                  把路径全部找完之后，剩余网络是最优网络，即能实现最大流。
                  寻找增广路径时我使用了广搜，这是比较容易实现的过程。
 
源码：&lt;/p&gt;
&lt;!-- more --&gt;
&lt;pre&gt;&lt;code&gt;
Problem: 1273		User: moxiaomomo
Memory: 332K		Time: 0MS
Language: C++		Result: Accepted
Source Code

Source Code

Problem: 1273		User: moxiaomomo
Memory: 332K		Time: 0MS
Language: C++		Result: Accepted
Source Code
#include&lt;iostream&gt;
using namespace std;

int N,M;

int cost[205][205],r;
int Min[205],pre[205];    
bool visit[205];   //搜索标记

int bfs()
{
	int q[205],start = 0,end = 0;
	memset(visit,false,sizeof(visit));
	q[0] = 1;         //以n点为搜索起点
	visit[1]=true;
	Min[1]=10000005;
	while(start&lt;=end)     //搜索的最后一个点将是n+1
	{
		int t=q[start];      //下面进行点t的广搜
		for(int i=1;i&lt;=M;++i)
		{
			if(!visit[i]&amp;&amp;cost[t][i]!=0)
			{   //Min[t],最小值传递;如果前向节点记录的值比当前的边的值要大，则...
				Min[i]=(Min[t]&lt;cost[t][i])? Min[t] : cost[t][i];
				//Min[t]的作用是记录路径中权值最小的边
				pre[i]=t;         //i的前向节点为t,在搜索过程中不断更新
				if(i==M)
				{return Min[M];}     //搜索完毕
				visit[i]=true;
				q[++end]=i;     //将i并入已搜索的集合
			}
		}
		start++;      //进行下一个点的广搜
	}
	if (visit[M])      //如果最后一个点被搜索到，则说明存在增广路径
       return Min[M];
    else return -1 ;
}

void Ford_Fulkerson()
{
	int max=0,t,pre_t;
	while((r = bfs()) != -1) //存在增广路径
	{
		max+=r; //最后max的值将是最大流的值
		t=M;
		while(t!=1)
		{
			pre_t=pre[t]; //找出前向点
			cost[pre_t][t]-=r;    //前向路径值减一
			cost[t][pre_t]+=r;    //后向路径值加一
			t=pre_t;      //更新前向点
		}
	}
	printf(&quot;%d/n&quot;,max);
}

int main()
{
	int k,x,y;
	while(scanf (&quot;%d%d&quot;,&amp;N,&amp;M) != EOF)
	{
		memset(cost,0,sizeof(cost));

		for(int i=0;i&lt;N;++i)
		{
			scanf(&quot;%d%d%d&quot;,&amp;x,&amp;y,&amp;k);
			cost[x][y]+=k;
		}

		Ford_Fulkerson();
	}

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/P&gt;
&lt;p&gt;31 Oct 2010&lt;/p&gt;


</description>
                <link>http://moxiaomomo.github.com/blue_sky/algorithm/2010/10/31/%5BC%2B%2B%5Dpku_1273</link>
                <guid>http://moxiaomomo.github.com/blue_sky/algorithm/2010/10/31/[C++]pku_1273</guid>
                <pubDate>2010-10-31T00:00:00+08:00</pubDate>
        </item>


</channel>
</rss>
